import { EmailNotifications } from '.'

let emailNotifications

beforeEach(async () => {
  emailNotifications = await EmailNotifications.create({ from: 'test', to: 'test', cc: 'test', bcc: 'test', subject: 'test', text: 'test', html: 'test', attachments: 'test', replyTo: 'test', inReplyTo: 'test', references: 'test', attachDataUrls: 'test', watchHtml: 'test', icalEvent: 'test', alternatives: 'test', encoding: 'test', raw: 'test', textEncoding: 'test', priority: 'test', headers: 'test', messageId: 'test', list: 'test', disableFileAccess: 'test', disableUrlAccess: 'test' })
})

describe('view', () => {
  it('returns simple view', () => {
    const view = emailNotifications.view()
    expect(typeof view).toBe('object')
    expect(view.id).toBe(emailNotifications.id)
    expect(view.from).toBe(emailNotifications.from)
    expect(view.to).toBe(emailNotifications.to)
    expect(view.cc).toBe(emailNotifications.cc)
    expect(view.bcc).toBe(emailNotifications.bcc)
    expect(view.subject).toBe(emailNotifications.subject)
    expect(view.text).toBe(emailNotifications.text)
    expect(view.html).toBe(emailNotifications.html)
    expect(view.attachments).toBe(emailNotifications.attachments)
    expect(view.replyTo).toBe(emailNotifications.replyTo)
    expect(view.inReplyTo).toBe(emailNotifications.inReplyTo)
    expect(view.references).toBe(emailNotifications.references)
    expect(view.attachDataUrls).toBe(emailNotifications.attachDataUrls)
    expect(view.watchHtml).toBe(emailNotifications.watchHtml)
    expect(view.icalEvent).toBe(emailNotifications.icalEvent)
    expect(view.alternatives).toBe(emailNotifications.alternatives)
    expect(view.encoding).toBe(emailNotifications.encoding)
    expect(view.raw).toBe(emailNotifications.raw)
    expect(view.textEncoding).toBe(emailNotifications.textEncoding)
    expect(view.priority).toBe(emailNotifications.priority)
    expect(view.headers).toBe(emailNotifications.headers)
    expect(view.messageId).toBe(emailNotifications.messageId)
    expect(view.list).toBe(emailNotifications.list)
    expect(view.disableFileAccess).toBe(emailNotifications.disableFileAccess)
    expect(view.disableUrlAccess).toBe(emailNotifications.disableUrlAccess)
    expect(view.createdAt).toBeTruthy()
    expect(view.updatedAt).toBeTruthy()
  })

  it('returns full view', () => {
    const view = emailNotifications.view(true)
    expect(typeof view).toBe('object')
    expect(view.id).toBe(emailNotifications.id)
    expect(view.from).toBe(emailNotifications.from)
    expect(view.to).toBe(emailNotifications.to)
    expect(view.cc).toBe(emailNotifications.cc)
    expect(view.bcc).toBe(emailNotifications.bcc)
    expect(view.subject).toBe(emailNotifications.subject)
    expect(view.text).toBe(emailNotifications.text)
    expect(view.html).toBe(emailNotifications.html)
    expect(view.attachments).toBe(emailNotifications.attachments)
    expect(view.replyTo).toBe(emailNotifications.replyTo)
    expect(view.inReplyTo).toBe(emailNotifications.inReplyTo)
    expect(view.references).toBe(emailNotifications.references)
    expect(view.attachDataUrls).toBe(emailNotifications.attachDataUrls)
    expect(view.watchHtml).toBe(emailNotifications.watchHtml)
    expect(view.icalEvent).toBe(emailNotifications.icalEvent)
    expect(view.alternatives).toBe(emailNotifications.alternatives)
    expect(view.encoding).toBe(emailNotifications.encoding)
    expect(view.raw).toBe(emailNotifications.raw)
    expect(view.textEncoding).toBe(emailNotifications.textEncoding)
    expect(view.priority).toBe(emailNotifications.priority)
    expect(view.headers).toBe(emailNotifications.headers)
    expect(view.messageId).toBe(emailNotifications.messageId)
    expect(view.list).toBe(emailNotifications.list)
    expect(view.disableFileAccess).toBe(emailNotifications.disableFileAccess)
    expect(view.disableUrlAccess).toBe(emailNotifications.disableUrlAccess)
    expect(view.createdAt).toBeTruthy()
    expect(view.updatedAt).toBeTruthy()
  })
})
